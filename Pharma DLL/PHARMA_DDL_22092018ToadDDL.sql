--
-- Create Schema Script
--   Database Version            : 12.1.0.1.0
--   Database Compatible Level   : 12.1.0.1.0
--   Script Compatible Level     : 12.1.0.1.0
--   Toad Version                : 12.8.0.49
--   DB Connect String           : ORCL_AT_HOME
--   Schema                      : PHARMA
--   Script Created by           : PHARMA
--   Script Created at           : 22/09/2018 03:22:07 Õ
--   Notes                       : 
--

-- Object Counts: 
--   Indexes: 26        Columns: 33         
--   Sequences: 12 
--   Tables: 18         Columns: 142        Constraints: 56     
--   Triggers: 12 
--   Views: 1           Columns: 6          


-- "Set define off" turns off substitution variables.
Set define off; 

--
-- CFG_TARGET_CUSTOMERS_SEQ  (Sequence) 
--
CREATE SEQUENCE CFG_TARGET_CUSTOMERS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_TARGET_SECTIONS_SEQ  (Sequence) 
--
CREATE SEQUENCE CFG_TARGET_SECTIONS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_CUSTOMERS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_CUSTOMERS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_CUST_SECTIONS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_CUST_SECTIONS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_ITEMS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_ITEMS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_ITEM_UNITS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_ITEM_UNITS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_JOB_TITLES_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_JOB_TITLES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_MANUFACTURERS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_MANUFACTURERS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_REPS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_REPS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_SUPPLIERS_SEQ  (Sequence) 
--
CREATE SEQUENCE LKB_SUPPLIERS_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- TRX_DAILY_SALES_SEQ  (Sequence) 
--
CREATE SEQUENCE TRX_DAILY_SALES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- TRX_INVENTORIES_SEQ  (Sequence) 
--
CREATE SEQUENCE TRX_INVENTORIES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_CUST_SECTIONS  (Table) 
--
CREATE TABLE LKB_CUST_SECTIONS
(
  SECTION_ID    NUMBER,
  SECTION_CODE  VARCHAR2(100 BYTE),
  SECTION_NAME  VARCHAR2(200 BYTE),
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE)
);


--
-- LKB_JOB_TITLES  (Table) 
--
CREATE TABLE LKB_JOB_TITLES
(
  TITLE_ID     NUMBER,
  TITLE_CODE   VARCHAR2(100 BYTE),
  TITLE_NAME   VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- LKB_MANUFACTURERS  (Table) 
--
CREATE TABLE LKB_MANUFACTURERS
(
  MNF_ID       NUMBER,
  MNF_CODE     VARCHAR2(100 BYTE),
  MNF_NAME     VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- LKB_REPS  (Table) 
--
CREATE TABLE LKB_REPS
(
  REP_ID        NUMBER,
  REP_CODE      VARCHAR2(500 BYTE),
  REP_NAME      VARCHAR2(2000 BYTE),
  REP_TITLE_ID  NUMBER,
  MANAGER_ID    NUMBER,
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE)
);


--
-- LKB_SUPPLIERS  (Table) 
--
CREATE TABLE LKB_SUPPLIERS
(
  SUPPLIER_ID     NUMBER,
  SUPPLIER_CODE   VARCHAR2(100 BYTE),
  SUPPLIER_NAME   VARCHAR2(200 BYTE),
  MANUFACTURE_ID  NUMBER,
  CREATE_DATE     DATE                          DEFAULT SYSDATE,
  CREATED_BY      VARCHAR2(500 BYTE)            DEFAULT USER,
  MODIFY_DATE     DATE,
  MODIFIED_BY     VARCHAR2(500 BYTE)
);


--
-- LKB_UNITS  (Table) 
--
CREATE TABLE LKB_UNITS
(
  UNIT_ID      NUMBER,
  UNIT_CODE    VARCHAR2(100 BYTE),
  UNIT_NAME    VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- LKB_CUST_SECTIONS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_CUST_SECTIONS_PK ON LKB_CUST_SECTIONS
(SECTION_ID);

--
-- LKB_CUST_SECTIONS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_CUST_SECTIONS_U01 ON LKB_CUST_SECTIONS
(SECTION_NAME);

--
-- LKB_JOB_TITLES_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_JOB_TITLES_PK ON LKB_JOB_TITLES
(TITLE_ID);

--
-- LKB_MANUFACTURERS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_MANUFACTURERS_PK ON LKB_MANUFACTURERS
(MNF_ID);

--
-- LKB_PROD_UNITS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_PROD_UNITS_PK ON LKB_UNITS
(UNIT_ID);

--
-- LKB_PROD_UNITS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_PROD_UNITS_U01 ON LKB_UNITS
(UNIT_NAME);

--
-- LKB_REPS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_REPS_PK ON LKB_REPS
(REP_ID);

--
-- LKB_REPS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_REPS_U01 ON LKB_REPS
(REP_NAME);

--
-- LKB_SUPPLIERS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_SUPPLIERS_PK ON LKB_SUPPLIERS
(SUPPLIER_ID);

--
-- LKB_SUPPLIERS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_SUPPLIERS_U01 ON LKB_SUPPLIERS
(SUPPLIER_NAME);

--
-- LKB_CUST_SECTIONS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_CUST_SECTIONS_TRG
BEFORE INSERT
ON LKB_CUST_SECTIONS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column SECTION_ID
IF :new.SECTION_ID IS NULL THEN
  :new.SECTION_ID := LKB_CUST_SECTIONS_SEQ.nextval;
  END IF;
END LKB_CUST_SECTIONS_TRG;
/


--
-- LKB_ITEM_UNITS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER "LKB_ITEM_UNITS_TRG" BEFORE INSERT
ON LKB_UNITS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column UNIT_ID
IF :new.UNIT_ID IS NULL THEN
  :new.UNIT_ID := LKB_ITEM_UNITS_SEQ.nextval;
  END IF;
END LKB_ITEM_UNITS_TRG;
/


--
-- LKB_JOB_TITLES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_JOB_TITLES_TRG
BEFORE INSERT
ON LKB_JOB_TITLES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TITLE_ID IS NULL THEN
  :new.TITLE_ID := LKB_JOB_TITLES_SEQ.nextval;
  END IF;
END LKB_JOB_TITLES_TRG;
/


--
-- LKB_MANUFACTURERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_MANUFACTURERS_TRG
BEFORE INSERT
ON LKB_MANUFACTURERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column MNF_ID
IF :new.MNF_ID IS NULL THEN
  :new.MNF_ID := LKB_MANUFACTURERS_SEQ.nextval;
  END IF;
END LKB_MANUFACTURERS_TRG;
/


--
-- LKB_REPS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_REPS_TRG
BEFORE INSERT
ON LKB_REPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
IF  :new.REP_ID IS NULL THEN 
  :new.REP_ID := LKB_REPS_SEQ.nextval;
END IF;
END LKB_REPS_TRG;
/


--
-- LKB_SUPPLIERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_SUPPLIERS_TRG
BEFORE INSERT
ON LKB_SUPPLIERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column SUPPLIER_ID
IF  :new.SUPPLIER_ID IS NULL THEN
  :new.SUPPLIER_ID := LKB_SUPPLIERS_SEQ.nextval;
  END IF;
END LKB_SUPPLIERS_TRG;
/


--
-- LKB_CUSTOMERS  (Table) 
--
CREATE TABLE LKB_CUSTOMERS
(
  CUSTOMER_ID    NUMBER,
  CUSTOMER_CODE  VARCHAR2(100 BYTE),
  CUSTOMER_NAME  VARCHAR2(200 BYTE),
  SECTION_ID     NUMBER,
  CREATE_DATE    DATE                           DEFAULT SYSDATE,
  CREATED_BY     VARCHAR2(500 BYTE)             DEFAULT USER,
  MODIFY_DATE    DATE,
  MODIFIED_BY    VARCHAR2(500 BYTE)
);


--
-- LKB_ITEMS  (Table) 
--
CREATE TABLE LKB_ITEMS
(
  ITEM_ID         NUMBER,
  ITEM_CODE       VARCHAR2(100 BYTE),
  ITEM_NAME       VARCHAR2(200 BYTE),
  MANUFACTURE_ID  NUMBER,
  CREATE_DATE     DATE                          DEFAULT SYSDATE,
  CREATED_BY      VARCHAR2(500 BYTE)            DEFAULT USER,
  MODIFY_DATE     DATE,
  MODIFIED_BY     VARCHAR2(500 BYTE)
);


--
-- RTN_ITEMS_SUPPLIERS  (Table) 
--
CREATE TABLE RTN_ITEMS_SUPPLIERS
(
  ITEM_ID      NUMBER,
  SUPPLIER_ID  NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- RTN_ITEMS_UNITS  (Table) 
--
CREATE TABLE RTN_ITEMS_UNITS
(
  ITEM_ID      NUMBER,
  UNIT_ID      NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE),
  SALES_PRICE  NUMBER
);


--
-- RTN_REPS_CUSTOMERS  (Table) 
--
CREATE TABLE RTN_REPS_CUSTOMERS
(
  REP_ID       NUMBER,
  CUSTOMER_ID  NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- RTN_REPS_ITEMS  (Table) 
--
CREATE TABLE RTN_REPS_ITEMS
(
  REP_ID       NUMBER,
  ITEM_ID      NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- TRX_DAILY_SALES  (Table) 
--
CREATE TABLE TRX_DAILY_SALES
(
  TRX_ID       NUMBER,
  TRX_CODE     VARCHAR2(100 BYTE),
  TRX_DATE     DATE                             DEFAULT SYSDATE,
  TRX_TYPE     NUMBER                           DEFAULT 2,
  CUSTOMER_ID  NUMBER,
  ITEM_ID      NUMBER,
  UNIT_ID      NUMBER,
  PRICE        NUMBER,
  QUANTITY     NUMBER,
  AMOUNT       NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TRX_DAILY_SALES.TRX_CODE IS 'Invoice number (by owner)';

COMMENT ON COLUMN TRX_DAILY_SALES.TRX_TYPE IS '1= Due Opening balance, 2=Invoice';


--
-- TRX_INVENTORIES  (Table) 
--
CREATE TABLE TRX_INVENTORIES
(
  TRX_ID           NUMBER,
  TRX_CODE         VARCHAR2(100 BYTE),
  TRX_DATE         DATE                         DEFAULT SYSDATE,
  TRX_TYPE         NUMBER                       DEFAULT 2,
  ITEM_ID          NUMBER,
  UNIT_ID          NUMBER,
  QUANTITY_IN      NUMBER,
  QUANTITY_OUT     NUMBER,
  SALES_ID         NUMBER,
  INVENTORY_NOTES  VARCHAR2(4000 BYTE),
  CREATE_DATE      DATE                         DEFAULT SYSDATE,
  CREATED_BY       VARCHAR2(500 BYTE)           DEFAULT USER,
  MODIFY_DATE      DATE,
  MODIFIED_BY      VARCHAR2(500 BYTE)
);

COMMENT ON COLUMN TRX_INVENTORIES.TRX_TYPE IS '1= Opening balance, 2=Invoice';

COMMENT ON COLUMN TRX_INVENTORIES.SALES_ID IS 'The invoice number ';


--
-- LKB_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_CUSTOMERS_PK ON LKB_CUSTOMERS
(CUSTOMER_ID);

--
-- LKB_CUSTOMERS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_CUSTOMERS_U01 ON LKB_CUSTOMERS
(CUSTOMER_NAME);

--
-- LKB_ITEMS_PK  (Index) 
--
CREATE UNIQUE INDEX LKB_ITEMS_PK ON LKB_ITEMS
(ITEM_ID);

--
-- LKB_ITEMS_U01  (Index) 
--
CREATE UNIQUE INDEX LKB_ITEMS_U01 ON LKB_ITEMS
(ITEM_NAME);

--
-- RTN_ITEMS_UNITS_PK  (Index) 
--
CREATE UNIQUE INDEX RTN_ITEMS_UNITS_PK ON RTN_ITEMS_UNITS
(ITEM_ID, UNIT_ID);

--
-- RTN_ITEM_SUPPLIERS_PK  (Index) 
--
CREATE UNIQUE INDEX RTN_ITEM_SUPPLIERS_PK ON RTN_ITEMS_SUPPLIERS
(ITEM_ID, SUPPLIER_ID);

--
-- RTN_REPS_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX RTN_REPS_CUSTOMERS_PK ON RTN_REPS_CUSTOMERS
(REP_ID, CUSTOMER_ID);

--
-- RTN_REPS_ITEMS_PK  (Index) 
--
CREATE UNIQUE INDEX RTN_REPS_ITEMS_PK ON RTN_REPS_ITEMS
(REP_ID, ITEM_ID);

--
-- TRX_DAILY_SALES_PK  (Index) 
--
CREATE UNIQUE INDEX TRX_DAILY_SALES_PK ON TRX_DAILY_SALES
(TRX_ID);

--
-- TRX_INVENTORIES_PK  (Index) 
--
CREATE UNIQUE INDEX TRX_INVENTORIES_PK ON TRX_INVENTORIES
(TRX_ID);

--
-- LKB_CUSTOMERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_CUSTOMERS_TRG
BEFORE INSERT
ON LKB_CUSTOMERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column CUSTOMER_ID
IF :new.CUSTOMER_ID IS NULL THEN
  :new.CUSTOMER_ID := LKB_CUSTOMERS_SEQ.nextval;
  END IF;
END LKB_CUSTOMERS_TRG;
/


--
-- LKB_ITEMS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER LKB_ITEMS_TRG
BEFORE INSERT
ON LKB_ITEMS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column PRODUCT_ID
IF :new.ITEM_ID IS NULL THEN 
  :new.ITEM_ID := LKB_ITEMS_SEQ.nextval;
  END IF;
END LKB_ITEMS_TRG;
/


--
-- TRX_DAILY_SALES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRX_DAILY_SALES_TRG
BEFORE INSERT
ON TRX_DAILY_SALES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRX_ID
IF :new.TRX_ID IS NULL THEN
  :new.TRX_ID := TRX_DAILY_SALES_SEQ.nextval;
  END IF;
END TRX_DAILY_SALES_TRG;
/


--
-- TRX_INVENTORIES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER TRX_INVENTORIES_TRG
BEFORE INSERT
ON TRX_INVENTORIES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRX_ID
IF :new.TRX_ID IS NULL THEN
  :new.TRX_ID := TRX_INVENTORIES_SEQ.nextval;
  END IF;
END TRX_INVENTORIES_TRG;
/


--
-- CFG_ITEM_UNITS_MIN  (Table) 
--
CREATE TABLE CFG_ITEM_UNITS_MIN
(
  ITEM_ID      NUMBER,
  UNIT_ID      NUMBER,
  MIN_QUANT    NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
);


--
-- CFG_TARGET  (Table) 
--
CREATE TABLE CFG_TARGET
(
  TRX_ID        NUMBER                          NOT NULL,
  TRX_DATE      DATE                            DEFAULT SYSDATE,
  TRG_YEAR      NUMBER,
  TRG_MONTH     NUMBER,
  ITEM_ID       NUMBER CONSTRAINT CFG_TARGET_C01 NOT NULL,
  UNIT_ID       NUMBER,
  REP_ID        NUMBER CONSTRAINT CFG_TARGET_C02 NOT NULL,
  TRG_QUANTITY  NUMBER,
  TRG_AMOUNT    NUMBER,
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE)
);


--
-- CFG_TARGET_SECTIONS  (Table) 
--
CREATE TABLE CFG_TARGET_SECTIONS
(
  TRG_SEC_ID  NUMBER,
  TARGET_ID   NUMBER,
  SECTION_ID  NUMBER,
  NOTES       VARCHAR2(500 BYTE)
);


--
-- CFG_ITEM_UNITS_MIN_PK  (Index) 
--
CREATE UNIQUE INDEX CFG_ITEM_UNITS_MIN_PK ON CFG_ITEM_UNITS_MIN
(ITEM_ID, UNIT_ID);

--
-- CFG_TARGET_PK  (Index) 
--
CREATE UNIQUE INDEX CFG_TARGET_PK ON CFG_TARGET
(TRX_ID);

--
-- CFG_TARGET_SECTIONS_PK  (Index) 
--
CREATE UNIQUE INDEX CFG_TARGET_SECTIONS_PK ON CFG_TARGET_SECTIONS
(TRG_SEC_ID);

--
-- CFG_TARGET_SECTIONS_U01  (Index) 
--
CREATE UNIQUE INDEX CFG_TARGET_SECTIONS_U01 ON CFG_TARGET_SECTIONS
(TARGET_ID, SECTION_ID);

--
-- ITEMS_MIN_ALARM  (View) 
--
CREATE OR REPLACE FORCE VIEW ITEMS_MIN_ALARM
(ITEM_ID, ITEM_NAME, UNIT_ID, UNIT_NAME, MIN_QUANT, 
 BALANCE)
BEQUEATH DEFINER
AS 
SELECT "ITEM_ID","ITEM_NAME","UNIT_ID","UNIT_NAME","MIN_QUANT","BALANCE"
  FROM (SELECT M.ITEM_ID,
               I.ITEM_NAME,
               M.UNIT_ID,
               U.UNIT_NAME,
               M.MIN_QUANT,
               (SELECT SUM (N.QUANTITY_IN) - SUM (N.QUANTITY_OUT)
                  FROM TRX_INVENTORIES N
                 WHERE N.ITEM_ID = M.ITEM_ID AND N.UNIT_ID = M.UNIT_ID)
                  BALANCE
          FROM CFG_ITEM_UNITS_MIN M, LKB_ITEMS I, LKB_UNITS U
         WHERE M.ITEM_ID = I.ITEM_ID AND M.UNIT_ID = U.UNIT_ID)
 WHERE BALANCE < MIN_QUANT;


--
-- CFG_TARGET_SECTIONS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER CFG_TARGET_SECTIONS_TRG
BEFORE INSERT
ON CFG_TARGET_SECTIONS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRG_SEC_ID

IF :new.TRG_SEC_ID IS NOT NULL THEN
  :new.TRG_SEC_ID := CFG_TARGET_SECTIONS_SEQ.nextval;
 END IF;
END CFG_TARGET_SECTIONS_TRG;
/


--
-- CFG_TARGET_CUSTOMERS  (Table) 
--
CREATE TABLE CFG_TARGET_CUSTOMERS
(
  TARGET_CUST_ID  NUMBER,
  TARGET_SEC_ID   NUMBER,
  CUSTOMER_ID     NUMBER,
  NOTES           VARCHAR2(500 BYTE)
);


--
-- CFG_TARGET_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX CFG_TARGET_CUSTOMERS_PK ON CFG_TARGET_CUSTOMERS
(TARGET_CUST_ID);

--
-- CFG_TARGET_CUSTOMERS_U01  (Index) 
--
CREATE UNIQUE INDEX CFG_TARGET_CUSTOMERS_U01 ON CFG_TARGET_CUSTOMERS
(TARGET_SEC_ID, CUSTOMER_ID);

--
-- CFG_TARGET_CUSTOMERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER CFG_TARGET_CUSTOMERS_TRG
BEFORE INSERT
ON CFG_TARGET_CUSTOMERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TARGET_CUST_ID IS NULL THEN
-- For Toad:  Highlight column TARGET_CUST_ID
  :new.TARGET_CUST_ID := CFG_TARGET_CUSTOMERS_SEQ.nextval;
  END IF;
END CFG_TARGET_CUSTOMERS_TRG;
/


-- 
-- Non Foreign Key Constraints for Table LKB_CUST_SECTIONS 
-- 
ALTER TABLE LKB_CUST_SECTIONS ADD (
  CONSTRAINT LKB_CUST_SECTIONS_PK
  PRIMARY KEY
  (SECTION_ID)
  USING INDEX LKB_CUST_SECTIONS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_CUST_SECTIONS ADD (
  CONSTRAINT LKB_CUST_SECTIONS_U01
  UNIQUE (SECTION_NAME)
  USING INDEX LKB_CUST_SECTIONS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_JOB_TITLES 
-- 
ALTER TABLE LKB_JOB_TITLES ADD (
  CONSTRAINT LKB_JOB_TITLES_PK
  PRIMARY KEY
  (TITLE_ID)
  USING INDEX LKB_JOB_TITLES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_MANUFACTURERS 
-- 
ALTER TABLE LKB_MANUFACTURERS ADD (
  CONSTRAINT LKB_MANUFACTURERS_PK
  PRIMARY KEY
  (MNF_ID)
  USING INDEX LKB_MANUFACTURERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_REPS 
-- 
ALTER TABLE LKB_REPS ADD (
  CONSTRAINT LKB_REPS_PK
  PRIMARY KEY
  (REP_ID)
  USING INDEX LKB_REPS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_REPS ADD (
  CONSTRAINT LKB_REPS_U01
  UNIQUE (REP_NAME)
  USING INDEX LKB_REPS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_SUPPLIERS 
-- 
ALTER TABLE LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_PK
  PRIMARY KEY
  (SUPPLIER_ID)
  USING INDEX LKB_SUPPLIERS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_U01
  UNIQUE (SUPPLIER_NAME)
  USING INDEX LKB_SUPPLIERS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_UNITS 
-- 
ALTER TABLE LKB_UNITS ADD (
  CONSTRAINT LKB_PROD_UNITS_PK
  PRIMARY KEY
  (UNIT_ID)
  USING INDEX LKB_PROD_UNITS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_UNITS ADD (
  CONSTRAINT LKB_PROD_UNITS_U01
  UNIQUE (UNIT_NAME)
  USING INDEX LKB_PROD_UNITS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_CUSTOMERS 
-- 
ALTER TABLE LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_PK
  PRIMARY KEY
  (CUSTOMER_ID)
  USING INDEX LKB_CUSTOMERS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_U01
  UNIQUE (CUSTOMER_NAME)
  USING INDEX LKB_CUSTOMERS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_ITEMS 
-- 
ALTER TABLE LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_PK
  PRIMARY KEY
  (ITEM_ID)
  USING INDEX LKB_ITEMS_PK
  ENABLE VALIDATE);

ALTER TABLE LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_U01
  UNIQUE (ITEM_NAME)
  USING INDEX LKB_ITEMS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_ITEMS_SUPPLIERS 
-- 
ALTER TABLE RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_PK
  PRIMARY KEY
  (ITEM_ID, SUPPLIER_ID)
  USING INDEX RTN_ITEM_SUPPLIERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_ITEMS_UNITS 
-- 
ALTER TABLE RTN_ITEMS_UNITS ADD (
  CONSTRAINT RTN_ITEMS_UNITS_PK
  PRIMARY KEY
  (ITEM_ID, UNIT_ID)
  USING INDEX RTN_ITEMS_UNITS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_REPS_CUSTOMERS 
-- 
ALTER TABLE RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_PK
  PRIMARY KEY
  (REP_ID, CUSTOMER_ID)
  USING INDEX RTN_REPS_CUSTOMERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_REPS_ITEMS 
-- 
ALTER TABLE RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_PK
  PRIMARY KEY
  (REP_ID, ITEM_ID)
  USING INDEX RTN_REPS_ITEMS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRX_DAILY_SALES 
-- 
ALTER TABLE TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX TRX_DAILY_SALES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRX_INVENTORIES 
-- 
ALTER TABLE TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX TRX_INVENTORIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_ITEM_UNITS_MIN 
-- 
ALTER TABLE CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_PK
  PRIMARY KEY
  (ITEM_ID, UNIT_ID)
  USING INDEX CFG_ITEM_UNITS_MIN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET 
-- 
ALTER TABLE CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX CFG_TARGET_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET_SECTIONS 
-- 
ALTER TABLE CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_PK
  PRIMARY KEY
  (TRG_SEC_ID)
  USING INDEX CFG_TARGET_SECTIONS_PK
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_U01
  UNIQUE (TARGET_ID, SECTION_ID)
  USING INDEX CFG_TARGET_SECTIONS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET_CUSTOMERS 
-- 
ALTER TABLE CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_PK
  PRIMARY KEY
  (TARGET_CUST_ID)
  USING INDEX CFG_TARGET_CUSTOMERS_PK
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_U01
  UNIQUE (TARGET_SEC_ID, CUSTOMER_ID)
  USING INDEX CFG_TARGET_CUSTOMERS_U01
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_REPS 
-- 
ALTER TABLE LKB_REPS ADD (
  CONSTRAINT LKB_REPS_R01 
  FOREIGN KEY (REP_TITLE_ID) 
  REFERENCES LKB_JOB_TITLES (TITLE_ID)
  ENABLE VALIDATE);

ALTER TABLE LKB_REPS ADD (
  CONSTRAINT LKB_REPS_R02 
  FOREIGN KEY (MANAGER_ID) 
  REFERENCES LKB_REPS (REP_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_SUPPLIERS 
-- 
ALTER TABLE LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_R01 
  FOREIGN KEY (MANUFACTURE_ID) 
  REFERENCES LKB_MANUFACTURERS (MNF_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_CUSTOMERS 
-- 
ALTER TABLE LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_R01 
  FOREIGN KEY (SECTION_ID) 
  REFERENCES LKB_CUST_SECTIONS (SECTION_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_ITEMS 
-- 
ALTER TABLE LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_R01 
  FOREIGN KEY (MANUFACTURE_ID) 
  REFERENCES LKB_MANUFACTURERS (MNF_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_ITEMS_SUPPLIERS 
-- 
ALTER TABLE RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_R02 
  FOREIGN KEY (SUPPLIER_ID) 
  REFERENCES LKB_SUPPLIERS (SUPPLIER_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_ITEMS_UNITS 
-- 
ALTER TABLE RTN_ITEMS_UNITS ADD (
  CONSTRAINT RTN_ITEMS_UNITS_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE RTN_ITEMS_UNITS ADD (
  CONSTRAINT RTN_ITEMS_UNITS_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_REPS_CUSTOMERS 
-- 
ALTER TABLE RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_R01 
  FOREIGN KEY (REP_ID) 
  REFERENCES LKB_REPS (REP_ID)
  ENABLE VALIDATE);

ALTER TABLE RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_R02 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_REPS_ITEMS 
-- 
ALTER TABLE RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_R01 
  FOREIGN KEY (REP_ID) 
  REFERENCES LKB_REPS (REP_ID)
  ENABLE VALIDATE);

ALTER TABLE RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_R02 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table TRX_DAILY_SALES 
-- 
ALTER TABLE TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R01 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);

ALTER TABLE TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R02 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R03 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table TRX_INVENTORIES 
-- 
ALTER TABLE TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_ITEM_UNITS_MIN 
-- 
ALTER TABLE CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET 
-- 
ALTER TABLE CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R03 
  FOREIGN KEY (REP_ID) 
  REFERENCES LKB_REPS (REP_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET_SECTIONS 
-- 
ALTER TABLE CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_R01 
  FOREIGN KEY (SECTION_ID) 
  REFERENCES LKB_CUST_SECTIONS (SECTION_ID)
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_R02 
  FOREIGN KEY (TARGET_ID) 
  REFERENCES CFG_TARGET (TRX_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET_CUSTOMERS 
-- 
ALTER TABLE CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_R01 
  FOREIGN KEY (TARGET_SEC_ID) 
  REFERENCES CFG_TARGET_SECTIONS (TRG_SEC_ID)
  ENABLE VALIDATE);

ALTER TABLE CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_R02 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);