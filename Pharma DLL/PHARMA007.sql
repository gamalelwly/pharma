--
-- Create Schema Script
--   Database Version            : 12.2.0.1.0
--   Database Compatible Level   : 12.2.0.1.0
--   Script Compatible Level     : 12.2.0.1.0
--   Toad Version                : 12.8.0.49
--   DB Connect String           : ORCLLINUX
--   Schema                      : PHARMA
--   Script Created by           : PHARMA
--   Script Created at           : 16/11/2018 08:38:51 ã
--   Notes                       : 
--

-- Object Counts: 
--   Indexes: 30        Columns: 38         
--   Packages: 1        Lines of Code: 30 
--   Package Bodies: 1  Lines of Code: 154462334 
--   Procedures: 1      Lines of Code: 6 
--   Sequences: 17 
--   Tables: 21         Columns: 165        Constraints: 62     
--   Triggers: 16 
--   Views: 6           Columns: 33         


-- "Set define off" turns off substitution variables.
Set define off; 

--
-- CUST_DUES_AGING_TYPE  (Type) 
--
CREATE OR REPLACE TYPE PHARMA.CUST_DUES_AGING_TYPE AS OBJECT
(
  CUSTOMER_ID NUMBER,
  CUSTOMER_NAME VARCHAR2(500),
  DUE_AGE VARCHAR2(100), -- EXAMPLE 0_30,30_60...etc
  DUE_AMOUNT NUMBER
)
/


--
-- SUPP_DUES_AGING_TYPE  (Type) 
--
CREATE OR REPLACE TYPE PHARMA.SUPP_DUES_AGING_TYPE AS OBJECT
(
  SUPPLIER_ID NUMBER,
  SUPPLIER_NAME VARCHAR2(500),
  DUE_AGE VARCHAR2(100), -- EXAMPLE 0_30,30_60...etc
  DUE_AMOUNT NUMBER
)
/


--
-- CFG_DUES_AGING_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.CFG_DUES_AGING_SEQ
  START WITH 61
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_TARGET_CUSTOMERS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.CFG_TARGET_CUSTOMERS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_TARGET_MASTER_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.CFG_TARGET_MASTER_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_TARGET_SECTIONS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.CFG_TARGET_SECTIONS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_TARGET_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.CFG_TARGET_SEQ
  START WITH 81
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_CUSTOMERS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_CUSTOMERS_SEQ
  START WITH 101
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_CUST_SECTIONS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_CUST_SECTIONS_SEQ
  START WITH 101
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_ITEMS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_ITEMS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_ITEM_UNITS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_ITEM_UNITS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_JOB_TITLES_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_JOB_TITLES_SEQ
  START WITH 81
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_MANUFACTURERS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_MANUFACTURERS_SEQ
  START WITH 41
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_REPS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_REPS_SEQ
  START WITH 41
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- LKB_SUPPLIERS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.LKB_SUPPLIERS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- PS_TXN_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.PS_TXN_SEQ
  START WITH 9901
  INCREMENT BY 50
  MAXVALUE 9999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- TRX_CUST_PAYMENTS_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.TRX_CUST_PAYMENTS_SEQ
  START WITH 21
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- TRX_DAILY_SALES_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.TRX_DAILY_SALES_SEQ
  START WITH 41
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- TRX_INVENTORIES_SEQ  (Sequence) 
--
CREATE SEQUENCE PHARMA.TRX_INVENTORIES_SEQ
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  CACHE 20
  NOORDER
  NOKEEP
  GLOBAL;


--
-- CFG_DUES_AGING  (Table) 
--
CREATE TABLE PHARMA.CFG_DUES_AGING
(
  ID            NUMBER,
  FROM_DAYS_NO  NUMBER,
  TO_DAYS_NO    NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_TARGET_MASTER  (Table) 
--
CREATE TABLE PHARMA.CFG_TARGET_MASTER
(
  TRG_ID     NUMBER,
  TRX_DATE   DATE                               DEFAULT SYSDATE,
  TRG_YEAR   NUMBER,
  TRG_MONTH  NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_CUST_SECTIONS  (Table) 
--
CREATE TABLE PHARMA.LKB_CUST_SECTIONS
(
  SECTION_ID    NUMBER,
  SECTION_CODE  VARCHAR2(100 BYTE),
  SECTION_NAME  VARCHAR2(200 BYTE),
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_JOB_TITLES  (Table) 
--
CREATE TABLE PHARMA.LKB_JOB_TITLES
(
  TITLE_ID     NUMBER,
  TITLE_CODE   VARCHAR2(100 BYTE),
  TITLE_NAME   VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_MANUFACTURERS  (Table) 
--
CREATE TABLE PHARMA.LKB_MANUFACTURERS
(
  MNF_ID       NUMBER,
  MNF_CODE     VARCHAR2(100 BYTE),
  MNF_NAME     VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_REPS  (Table) 
--
CREATE TABLE PHARMA.LKB_REPS
(
  REP_ID        NUMBER,
  REP_CODE      VARCHAR2(500 BYTE),
  REP_NAME      VARCHAR2(2000 BYTE),
  REP_TITLE_ID  NUMBER,
  MANAGER_ID    NUMBER,
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_SUPPLIERS  (Table) 
--
CREATE TABLE PHARMA.LKB_SUPPLIERS
(
  SUPPLIER_ID     NUMBER,
  SUPPLIER_CODE   VARCHAR2(100 BYTE),
  SUPPLIER_NAME   VARCHAR2(200 BYTE),
  MANUFACTURE_ID  NUMBER,
  CREATE_DATE     DATE                          DEFAULT SYSDATE,
  CREATED_BY      VARCHAR2(500 BYTE)            DEFAULT USER,
  MODIFY_DATE     DATE,
  MODIFIED_BY     VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_UNITS  (Table) 
--
CREATE TABLE PHARMA.LKB_UNITS
(
  UNIT_ID      NUMBER,
  UNIT_CODE    VARCHAR2(100 BYTE),
  UNIT_NAME    VARCHAR2(200 BYTE),
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- PS_TXN  (Table) 
--
CREATE TABLE PHARMA.PS_TXN
(
  ID             NUMBER(20),
  PARENTID       NUMBER(20),
  COLLID         NUMBER(10),
  CONTENT        BLOB,
  CREATION_DATE  DATE                           DEFAULT sysdate
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_DUES_AGING_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_DUES_AGING_PK ON PHARMA.CFG_DUES_AGING
(ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_DUES_AGING_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_DUES_AGING_U01 ON PHARMA.CFG_DUES_AGING
(FROM_DAYS_NO, TO_DAYS_NO)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_MASTER_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_MASTER_PK ON PHARMA.CFG_TARGET_MASTER
(TRG_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_CUST_SECTIONS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_CUST_SECTIONS_PK ON PHARMA.LKB_CUST_SECTIONS
(SECTION_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_CUST_SECTIONS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_CUST_SECTIONS_U01 ON PHARMA.LKB_CUST_SECTIONS
(SECTION_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_JOB_TITLES_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_JOB_TITLES_PK ON PHARMA.LKB_JOB_TITLES
(TITLE_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_MANUFACTURERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_MANUFACTURERS_PK ON PHARMA.LKB_MANUFACTURERS
(MNF_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_PROD_UNITS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_PROD_UNITS_PK ON PHARMA.LKB_UNITS
(UNIT_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_PROD_UNITS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_PROD_UNITS_U01 ON PHARMA.LKB_UNITS
(UNIT_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_REPS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_REPS_PK ON PHARMA.LKB_REPS
(REP_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_REPS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_REPS_U01 ON PHARMA.LKB_REPS
(REP_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_SUPPLIERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_SUPPLIERS_PK ON PHARMA.LKB_SUPPLIERS
(SUPPLIER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_SUPPLIERS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_SUPPLIERS_U01 ON PHARMA.LKB_SUPPLIERS
(SUPPLIER_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- PS_TXN_IDX  (Index) 
--
CREATE INDEX PHARMA.PS_TXN_IDX ON PHARMA.PS_TXN
(COLLID, ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
REVERSE;

--
-- MONTHS_NAMES_V  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.MONTHS_NAMES_V
(ID, MONTH_NAME, LOCALE)
BEQUEATH DEFINER
AS 
SELECT 1 ID, 'January' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION 
SELECT 2  ID, 'February' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 3 ID, 'March' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 4 ID, 'April' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 5 ID, 'May' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 6 ID, 'June ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 7 ID, 'July   ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 8 ID, 'August   ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 9 ID, 'September' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 10 ID, 'October  ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 11 ID, 'November ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 12 ID, 'December ' MONTH_NAME , 'OTHERS' LOCALE FROM DUAL
UNION
SELECT 1 ID, 'íäÇíÑ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION 
SELECT 2  ID, 'ÝÈÑÇíÑ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 3 ID, 'ãÇÑÓ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 4 ID, 'ÃÈÑíá' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 5 ID, 'ãÇíæ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 6 ID, 'íæäíæ ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 7 ID, 'íæáíæ   ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 8 ID, 'ÃÛÓØÓ   ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 9 ID, 'ÓÈÊãÈÑ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 10 ID, 'ÃßÊæÈÑ  ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 11 ID, 'äæÝãÈÑ ' MONTH_NAME , 'AR' LOCALE FROM DUAL
UNION
SELECT 12 ID, 'ÏíÓãÈÑ ' , 'AR' LOCALE FROM DUAL
ORDER BY ID;


--
-- CFG_DUES_AGING_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.CFG_DUES_AGING_TRG
BEFORE INSERT
ON PHARMA.CFG_DUES_AGING
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF  :new.ID IS NULL THEN
-- For Toad:  Highlight column ID
  :new.ID := CFG_DUES_AGING_SEQ.nextval;
  END IF;
END CFG_DUES_AGING_TRG;
/


--
-- CFG_TARGET_MASTER_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.CFG_TARGET_MASTER_TRG
BEFORE INSERT
ON PHARMA.CFG_TARGET_MASTER
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TRG_ID IS NULL THEN
-- For Toad:  Highlight column TRG_ID
  :new.TRG_ID := CFG_TARGET_MASTER_SEQ.nextval;
  END IF;
END CFG_TARGET_MASTER_TRG;
/


--
-- LKB_CUST_SECTIONS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_CUST_SECTIONS_TRG
BEFORE INSERT
ON PHARMA.LKB_CUST_SECTIONS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column SECTION_ID
IF :new.SECTION_ID IS NULL THEN
  :new.SECTION_ID := LKB_CUST_SECTIONS_SEQ.nextval;
  END IF;
END LKB_CUST_SECTIONS_TRG;
/


--
-- LKB_ITEM_UNITS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_ITEM_UNITS_TRG BEFORE INSERT
ON PHARMA.LKB_UNITS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column UNIT_ID
IF :new.UNIT_ID IS NULL THEN
  :new.UNIT_ID := LKB_ITEM_UNITS_SEQ.nextval;
  END IF;
END LKB_ITEM_UNITS_TRG;
/


--
-- LKB_JOB_TITLES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_JOB_TITLES_TRG
BEFORE INSERT
ON PHARMA.LKB_JOB_TITLES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TITLE_ID IS NULL THEN
  :new.TITLE_ID := LKB_JOB_TITLES_SEQ.nextval;
  END IF;
END LKB_JOB_TITLES_TRG;
/


--
-- LKB_MANUFACTURERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_MANUFACTURERS_TRG
BEFORE INSERT
ON PHARMA.LKB_MANUFACTURERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column MNF_ID
IF :new.MNF_ID IS NULL THEN
  :new.MNF_ID := LKB_MANUFACTURERS_SEQ.nextval;
  END IF;
END LKB_MANUFACTURERS_TRG;
/


--
-- LKB_REPS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_REPS_TRG
BEFORE INSERT
ON PHARMA.LKB_REPS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
IF  :new.REP_ID IS NULL THEN 
  :new.REP_ID := LKB_REPS_SEQ.nextval;
END IF;
END LKB_REPS_TRG;
/


--
-- LKB_SUPPLIERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_SUPPLIERS_TRG
BEFORE INSERT
ON PHARMA.LKB_SUPPLIERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column SUPPLIER_ID
IF  :new.SUPPLIER_ID IS NULL THEN
  :new.SUPPLIER_ID := LKB_SUPPLIERS_SEQ.nextval;
  END IF;
END LKB_SUPPLIERS_TRG;
/


--
-- CUST_DUES_AGING_TABLE  (Type) 
--
CREATE OR REPLACE TYPE PHARMA.CUST_DUES_AGING_TABLE
AS TABLE OF CUST_DUES_AGING_TYPE
/


--
-- SUPP_DUES_AGING_TABLE  (Type) 
--
CREATE OR REPLACE TYPE PHARMA.SUPP_DUES_AGING_TABLE
AS TABLE OF SUPP_DUES_AGING_TYPE
/


--
-- LKB_CUSTOMERS  (Table) 
--
CREATE TABLE PHARMA.LKB_CUSTOMERS
(
  CUSTOMER_ID    NUMBER,
  CUSTOMER_CODE  VARCHAR2(100 BYTE),
  CUSTOMER_NAME  VARCHAR2(200 BYTE),
  SECTION_ID     NUMBER,
  CREATE_DATE    DATE                           DEFAULT SYSDATE,
  CREATED_BY     VARCHAR2(500 BYTE)             DEFAULT USER,
  MODIFY_DATE    DATE,
  MODIFIED_BY    VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- LKB_ITEMS  (Table) 
--
CREATE TABLE PHARMA.LKB_ITEMS
(
  ITEM_ID         NUMBER,
  ITEM_CODE       VARCHAR2(100 BYTE),
  ITEM_NAME       VARCHAR2(200 BYTE),
  MANUFACTURE_ID  NUMBER,
  CREATE_DATE     DATE                          DEFAULT SYSDATE,
  CREATED_BY      VARCHAR2(500 BYTE)            DEFAULT USER,
  MODIFY_DATE     DATE,
  MODIFIED_BY     VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- RTN_ITEMS_SUPPLIERS  (Table) 
--
CREATE TABLE PHARMA.RTN_ITEMS_SUPPLIERS
(
  ITEM_ID      NUMBER,
  SUPPLIER_ID  NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            MAXSIZE          UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- RTN_REPS_CUSTOMERS  (Table) 
--
CREATE TABLE PHARMA.RTN_REPS_CUSTOMERS
(
  REP_ID       NUMBER,
  CUSTOMER_ID  NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- RTN_REPS_ITEMS  (Table) 
--
CREATE TABLE PHARMA.RTN_REPS_ITEMS
(
  REP_ID       NUMBER,
  ITEM_ID      NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- TRX_CUST_PAYMENTS  (Table) 
--
CREATE TABLE PHARMA.TRX_CUST_PAYMENTS
(
  TRX_ID               NUMBER,
  TRX_DATE             DATE                     DEFAULT SYSDATE,
  PAYMENT_TYPE         VARCHAR2(500 CHAR),
  PAYMANT_DESCRIPTION  VARCHAR2(1000 CHAR),
  CUSTOMER_ID          NUMBER CONSTRAINT TRX_CUST_PAYMENTS_C01 NOT NULL,
  PAYMENT_AMOUNT       NUMBER CONSTRAINT TRX_CUST_PAYMENTS_C02 NOT NULL
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- TRX_DAILY_SALES  (Table) 
--
CREATE TABLE PHARMA.TRX_DAILY_SALES
(
  TRX_ID       NUMBER,
  TRX_CODE     VARCHAR2(100 BYTE),
  TRX_DATE     DATE                             DEFAULT SYSDATE,
  TRX_TYPE     NUMBER                           DEFAULT 2,
  CUSTOMER_ID  NUMBER,
  ITEM_ID      NUMBER,
  UNIT_ID      NUMBER,
  PRICE        NUMBER,
  QUANTITY     NUMBER,
  AMOUNT       NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

COMMENT ON COLUMN PHARMA.TRX_DAILY_SALES.TRX_CODE IS 'Invoice number (by owner)';

COMMENT ON COLUMN PHARMA.TRX_DAILY_SALES.TRX_TYPE IS '1= Due Opening balance, 2=Invoice';


--
-- TRX_INVENTORIES  (Table) 
--
CREATE TABLE PHARMA.TRX_INVENTORIES
(
  TRX_ID           NUMBER,
  TRX_CODE         VARCHAR2(100 BYTE),
  TRX_DATE         DATE                         DEFAULT SYSDATE,
  TRX_TYPE         NUMBER                       DEFAULT 2,
  ITEM_ID          NUMBER,
  UNIT_ID          NUMBER,
  QUANTITY_IN      NUMBER,
  QUANTITY_OUT     NUMBER,
  SALES_ID         NUMBER,
  INVENTORY_NOTES  VARCHAR2(4000 BYTE),
  CREATE_DATE      DATE                         DEFAULT SYSDATE,
  CREATED_BY       VARCHAR2(500 BYTE)           DEFAULT USER,
  MODIFY_DATE      DATE,
  MODIFIED_BY      VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            MAXSIZE          UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

COMMENT ON COLUMN PHARMA.TRX_INVENTORIES.TRX_TYPE IS '1= Opening balance, 2=Invoice';

COMMENT ON COLUMN PHARMA.TRX_INVENTORIES.SALES_ID IS 'The invoice number ';


--
-- LKB_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_CUSTOMERS_PK ON PHARMA.LKB_CUSTOMERS
(CUSTOMER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_CUSTOMERS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_CUSTOMERS_U01 ON PHARMA.LKB_CUSTOMERS
(CUSTOMER_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_ITEMS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_ITEMS_PK ON PHARMA.LKB_ITEMS
(ITEM_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- LKB_ITEMS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.LKB_ITEMS_U01 ON PHARMA.LKB_ITEMS
(ITEM_NAME)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- RTN_ITEM_SUPPLIERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.RTN_ITEM_SUPPLIERS_PK ON PHARMA.RTN_ITEMS_SUPPLIERS
(ITEM_ID, SUPPLIER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            MAXSIZE          UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- RTN_REPS_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.RTN_REPS_CUSTOMERS_PK ON PHARMA.RTN_REPS_CUSTOMERS
(REP_ID, CUSTOMER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- RTN_REPS_ITEMS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.RTN_REPS_ITEMS_PK ON PHARMA.RTN_REPS_ITEMS
(REP_ID, ITEM_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- TRX_CUST_PAYMENTS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.TRX_CUST_PAYMENTS_PK ON PHARMA.TRX_CUST_PAYMENTS
(TRX_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- TRX_DAILY_SALES_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.TRX_DAILY_SALES_PK ON PHARMA.TRX_DAILY_SALES
(TRX_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- TRX_INVENTORIES_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.TRX_INVENTORIES_PK ON PHARMA.TRX_INVENTORIES
(TRX_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            MAXSIZE          UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CUSTOMER_TOTAL_DUES_V  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.CUSTOMER_TOTAL_DUES_V
(CUSTOMER_ID, CUSTOMER_NAME, TOTAL_DUE)
BEQUEATH DEFINER
AS 
SELECT CUSTOMER_ID,
          CUSTOMER_NAME,
          SALES - PAYMENT TOTAL_DUE
     FROM (SELECT  CUST.CUSTOMER_ID,
                                CUST.CUSTOMER_NAME,
                                (SELECT SUM (NVL(SALES.AMOUNT,0)) FROM TRX_DAILY_SALES SALES WHERE SALES.CUSTOMER_ID = CUST.CUSTOMER_ID) SALES,
                                (SELECT SUM (NVL(PAYMENT.PAYMENT_AMOUNT,0)) FROM TRX_CUST_PAYMENTS PAYMENT WHERE PAYMENT.CUSTOMER_ID = CUST.CUSTOMER_ID) PAYMENT
             FROM LKB_CUSTOMERS CUST);


--
-- REPS_CUSTOMERS_AND_SECTIONS_V  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.REPS_CUSTOMERS_AND_SECTIONS_V
(REP_ID, REP_NAME, CUSTOMER_ID, CUSTOMER_CODE, CUSTOMER_NAME, 
 SECTION_ID, SECTION_CODE, SECTION_NAME)
BEQUEATH DEFINER
AS 
SELECT REPS.REP_ID,
       REPS.REP_NAME,
       CUSTS.CUSTOMER_ID,
       CUSTS.CUSTOMER_CODE,
       CUSTS.CUSTOMER_NAME,
       SEC.SECTION_ID,
       SEC.SECTION_CODE,
       SEC.SECTION_NAME
  FROM LKB_REPS REPS,RTN_REPS_CUSTOMERS REPS_CUST, LKB_CUSTOMERS CUSTS, LKB_CUST_SECTIONS SEC
  WHERE REPS.REP_ID = REPS_CUST.REP_ID
  AND REPS_CUST.CUSTOMER_ID = CUSTS.CUSTOMER_ID
  AND CUSTS.SECTION_ID = SEC.SECTION_ID;


--
-- REPS_ITEMS_V  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.REPS_ITEMS_V
(REP_ID, REP_NAME, ITEM_ID, ITEM_NAME, ITEM_CODE, 
 MANUFACTURE_ID)
BEQUEATH DEFINER
AS 
SELECT REPS.REP_ID,
       REPS.REP_NAME,
       ITEMS.ITEM_ID,
       ITEMS.ITEM_NAME,
       ITEMS.ITEM_CODE,    
       ITEMS.MANUFACTURE_ID
  FROM LKB_REPS REPS,RTN_REPS_ITEMS REPS_ITEMS,  LKB_ITEMS ITEMS
  WHERE REPS.REP_ID = REPS_ITEMS.REP_ID
  AND REPS_ITEMS.ITEM_ID = ITEMS.ITEM_ID;


--
-- TRX_DAILY_SALES_V  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.TRX_DAILY_SALES_V
(TRX_ID, TRX_CODE, TRX_DATE, DAYS, TRX_TYPE, 
 CUSTOMER_ID, AMOUNT)
BEQUEATH DEFINER
AS 
SELECT TRX_ID,
          TRX_CODE,
          TRX_DATE,
          TRUNC(SYSDATE - TRX_DATE) DAYS,
          TRX_TYPE,
          CUSTOMER_ID,
          AMOUNT
     FROM TRX_DAILY_SALES;


--
-- LKB_CUSTOMERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_CUSTOMERS_TRG
BEFORE INSERT
ON PHARMA.LKB_CUSTOMERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column CUSTOMER_ID
IF :new.CUSTOMER_ID IS NULL THEN
  :new.CUSTOMER_ID := LKB_CUSTOMERS_SEQ.nextval;
  END IF;
END LKB_CUSTOMERS_TRG;
/


--
-- LKB_ITEMS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.LKB_ITEMS_TRG
BEFORE INSERT
ON PHARMA.LKB_ITEMS
REFERENCING NEW AS NEW OLD AS OLD
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column ITEM_ID
IF :new.ITEM_ID IS NULL THEN 
  :new.ITEM_ID := LKB_ITEMS_SEQ.nextval;
  END IF;
END LKB_ITEMS_TRG;
/


--
-- TRX_CUST_PAYMENTS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.TRX_CUST_PAYMENTS_TRG
BEFORE INSERT
ON PHARMA.TRX_CUST_PAYMENTS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TRX_ID IS NULL THEN
-- For Toad:  Highlight column TRX_ID
  :new.TRX_ID := TRX_CUST_PAYMENTS_SEQ.nextval;
  END IF;
END TRX_CUST_PAYMENTS_TRG;
/


--
-- TRX_DAILY_SALES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.TRX_DAILY_SALES_TRG
BEFORE INSERT
ON PHARMA.TRX_DAILY_SALES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRX_ID
IF :new.TRX_ID IS NULL THEN
  :new.TRX_ID := TRX_DAILY_SALES_SEQ.nextval;
  END IF;
END TRX_DAILY_SALES_TRG;
/


--
-- TRX_INVENTORIES_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.TRX_INVENTORIES_TRG
BEFORE INSERT
ON PHARMA.TRX_INVENTORIES
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRX_ID
IF :new.TRX_ID IS NULL THEN
  :new.TRX_ID := TRX_INVENTORIES_SEQ.nextval;
  END IF;
END TRX_INVENTORIES_TRG;
/


--
-- CFG_ITEM_UNITS_MIN  (Table) 
--
CREATE TABLE PHARMA.CFG_ITEM_UNITS_MIN
(
  ITEM_ID      NUMBER,
  UNIT_ID      NUMBER,
  MIN_QUANT    NUMBER,
  CREATE_DATE  DATE                             DEFAULT SYSDATE,
  CREATED_BY   VARCHAR2(500 BYTE)               DEFAULT USER,
  MODIFY_DATE  DATE,
  MODIFIED_BY  VARCHAR2(500 BYTE),
  SALES_PRICE  NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_TARGET  (Table) 
--
CREATE TABLE PHARMA.CFG_TARGET
(
  TRX_ID        NUMBER                          NOT NULL,
  ITEM_ID       NUMBER CONSTRAINT CFG_TARGET_C01 NOT NULL,
  UNIT_ID       NUMBER,
  REP_ID        NUMBER CONSTRAINT CFG_TARGET_C02 NOT NULL,
  TRG_QUANTITY  NUMBER,
  TRG_AMOUNT    NUMBER,
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE),
  TRG_ID        NUMBER
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_TARGET_SECTIONS  (Table) 
--
CREATE TABLE PHARMA.CFG_TARGET_SECTIONS
(
  TRG_SEC_ID    NUMBER,
  TARGET_ID     NUMBER,
  SECTION_ID    NUMBER,
  TRG_PERCENT   NUMBER,
  TRG_QUANTITY  NUMBER,
  TRG_AMOUNT    NUMBER,
  CREATE_DATE   DATE                            DEFAULT SYSDATE,
  CREATED_BY    VARCHAR2(500 BYTE)              DEFAULT USER,
  MODIFY_DATE   DATE,
  MODIFIED_BY   VARCHAR2(500 BYTE),
  NOTES         VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_ITEM_UNITS_MIN_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_ITEM_UNITS_MIN_PK ON PHARMA.CFG_ITEM_UNITS_MIN
(ITEM_ID, UNIT_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_PK ON PHARMA.CFG_TARGET
(TRX_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_SECTIONS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_SECTIONS_PK ON PHARMA.CFG_TARGET_SECTIONS
(TRG_SEC_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_SECTIONS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_SECTIONS_U01 ON PHARMA.CFG_TARGET_SECTIONS
(TARGET_ID, SECTION_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- DUES_PKG  (Package) 
--
CREATE OR REPLACE PACKAGE PHARMA.DUES_PKG
AS
   /******************************************************************************
      NAME:       DUES_PKG
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        30/09/2018      Administrator       1. Created this package.
   ******************************************************************************/



   FUNCTION CUST_AGING_PERIODICALLY
      RETURN CUST_DUES_AGING_TABLE
      PIPELINED;

   FUNCTION CUST_AGING_MONTHLY
      RETURN CUST_DUES_AGING_TABLE
      PIPELINED;

   FUNCTION SUPP_AGING_PERIODICALLY
      RETURN SUPP_DUES_AGING_TABLE
      PIPELINED;

   FUNCTION SUPP_AGING_MONTHLY
      RETURN SUPP_DUES_AGING_TABLE
      PIPELINED;
END DUES_PKG;
/


--
-- DUES_PKG  (Package Body) 
--
CREATE OR REPLACE PACKAGE BODY PHARMA.DUES_PKG
AS
   /******************************************************************************
      NAME:       DUES_PKG
      PURPOSE:

      REVISIONS:
      Ver        Date        Author           Description
      ---------  ----------  ---------------  ------------------------------------
      1.0        30/09/2018      Administrator       1. Created this package.
   ******************************************************************************/
   TYPE CUST_AGE_RECORD IS RECORD
   (
      CUSTOMER_ID     NUMBER,
      CUSTOMER_NAME   VARCHAR2 (500),
      DUE_AGE         VARCHAR2 (100),              -- EXAMPLE 0_30,30_60...etc
      DUE_AMOUNT      NUMBER
   );

   TYPE CUST_AGE_TABLE IS TABLE OF CUST_AGE_RECORD
      INDEX BY PLS_INTEGER;

   TYPE SUPP_AGE_RECORD IS RECORD
   (
      SUPPLIER_ID     NUMBER,
      SUPPLIER_NAME   VARCHAR2 (500),
      DUE_AGE         VARCHAR2 (100),              -- EXAMPLE 0_30,30_60...etc
      DUE_AMOUNT      NUMBER
   );

   TYPE SUPP_AGE_TABLE IS TABLE OF SUPP_AGE_RECORD
      INDEX BY PLS_INTEGER;

   FUNCTION CUST_AGING_PERIODICALLY
      RETURN CUST_DUES_AGING_TABLE
      PIPELINED
   IS
      /*AGING_TABLE   CUST_AGE_TABLE;
      DUES_QUERY    CLOB := EMPTY_CLOB ();*/
      TOT_DUE  NUMBER;
      AGE_DUE NUMBER;
      
      CURSOR DUES_AGING_CURSOR IS
      SELECT FROM_DAYS_NO FROM_DAY,
             TO_DAYS_NO TO_DAY,
             FROM_DAYS_NO ||'  - '||   TO_DAYS_NO || ' Days' PERIOD_NAME
      FROM CFG_DUES_AGING;
      
      CURSOR CUST_TOT_DUES_CURSOR IS
      SELECT CUSTOMER_ID,
                   CUSTOMER_NAME,
                   TOTAL_DUE
       FROM CUSTOMER_TOTAL_DUES_V;
       
   BEGIN
      FOR CUST_TOT_DUE_RECORD IN CUST_TOT_DUES_CURSOR LOOP
            FOR CUST_INVOICES_RECORD IN (
                    SELECT SALES.CUSTOMER_ID, 
                              TRUNC(SYSDATE - SALES.TRX_DATE) TRX_DAYS, 
                              SALES.AMOUNT
                    FROM TRX_DAILY_SALES SALES
                    WHERE CUSTOMER_ID = CUST_TOT_DUE_RECORD.CUSTOMER_ID
                    ORDER BY SALES.TRX_DATE DESC) 
                LOOP  
                 IF TOT_DUE IS NULL OR TOT_DUE = 0 THEN 
                 TOT_DUE := CUST_TOT_DUE_RECORD.TOTAL_DUE;
                 END IF;
                       FOR DUES_AGING_RECORD IN DUES_AGING_CURSOR LOOP
                          AGE_DUE := 0;
                          IF CUST_INVOICES_RECORD.TRX_DAYS > DUES_AGING_RECORD.FROM_DAY 
                                            AND CUST_INVOICES_RECORD.TRX_DAYS <= DUES_AGING_RECORD.TO_DAY THEN
                                                DBMS_OUTPUT.PUT_LINE('TOT_DUE = '||TOT_DUE||' AND CUST_INVOICES_RECORD.AMOUNT = '||CUST_INVOICES_RECORD.AMOUNT);                                            
                                                IF TOT_DUE >= CUST_INVOICES_RECORD.AMOUNT THEN            
                                                    AGE_DUE:=AGE_DUE+CUST_INVOICES_RECORD.AMOUNT;
                                                    TOT_DUE:= TOT_DUE - CUST_INVOICES_RECORD.AMOUNT;       
                                                 ELSE
                                                    AGE_DUE:=AGE_DUE+TOT_DUE;
                                                    TOT_DUE:=0;
                                                END IF;
                                                     
                                                PIPE ROW (CUST_DUES_AGING_TYPE (CUST_TOT_DUE_RECORD.CUSTOMER_ID,
                                                             CUST_TOT_DUE_RECORD.CUSTOMER_NAME,
                                                             DUES_AGING_RECORD.PERIOD_NAME,
                                                             AGE_DUE));
                                                                                      
                                         END IF;
                                         EXIT WHEN CUST_INVOICES_RECORD.TRX_DAYS > DUES_AGING_RECORD.FROM_DAY 
                                            AND CUST_INVOICES_RECORD.TRX_DAYS <= DUES_AGING_RECORD.TO_DAY;
                    END LOOP;     
                    EXIT WHEN TOT_DUE = 0; 
                END LOOP;
      END LOOP;
      /*DUES_QUERY := 'SELECT NULL , NULL , NULL,NULL FROM DUAL WHERE 1 = 2 ';
      EXECUTE IMMEDIATE DUES_QUERY BULK COLLECT INTO AGING_TABLE;
      FOR i IN 1 .. AGING_TABLE.COUNT
      LOOP
         PIPE ROW (CUST_DUES_AGING_TYPE (AGING_TABLE (i).CUSTOMER_ID,
                                         AGING_TABLE (i).CUSTOMER_NAME,
                                         AGING_TABLE (i).DUE_AGE,
                                         AGING_TABLE (i).DUE_AMOUNT));
      END LOOP;
      AGING_TABLE.DELETE;*/
      RETURN;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN;
   END;
FUNCTION CUST_AGING_MONTHLY
      RETURN CUST_DUES_AGING_TABLE
      PIPELINED
   IS
      TOT_DUE  NUMBER;
      AGE_DUE NUMBER;
      
      CURSOR DUES_AGING_CURSOR IS
      SELECT TO_CHAR(SALES.TRX_DATE,'MM-YYYY') TRX_DATE
      FROM TRX_DAILY_SALES SALES
      ORDER BY SALES.TRX_DATE;
      
      CURSOR CUST_TOT_DUES_CURSOR IS
      SELECT CUSTOMER_ID,
                   CUSTOMER_NAME,
                   TOTAL_DUE
       FROM CUSTOMER_TOTAL_DUES_V;
       
   BEGIN
      FOR CUST_TOT_DUE_RECORD IN CUST_TOT_DUES_CURSOR LOOP
            FOR CUST_INVOICES_RECORD IN (
                    SELECT SALES.CUSTOMER_ID, 
                              TO_CHAR(SALES.TRX_DATE,'MM-YYYY') TRX_DAYS, 
                              SALES.AMOUNT
                    FROM TRX_DAILY_SALES SALES
                    WHERE CUSTOMER_ID = CUST_TOT_DUE_RECORD.CUSTOMER_ID
                    ORDER BY SALES.TRX_DATE DESC) 
                LOOP  
                 IF TOT_DUE IS NULL OR TOT_DUE = 0 THEN 
                 TOT_DUE := CUST_TOT_DUE_RECORD.TOTAL_DUE;
                 END IF;
                       FOR DUES_AGING_RECORD IN DUES_AGING_CURSOR LOOP
                          AGE_DUE := 0;
                          IF CUST_INVOICES_RECORD.TRX_DAYS = DUES_AGING_RECORD.TRX_DATE  THEN
                                                DBMS_OUTPUT.PUT_LINE('TOT_DUE = '||TOT_DUE||' AND CUST_INVOICES_RECORD.AMOUNT = '||CUST_INVOICES_RECORD.AMOUNT);                                            
                                                IF TOT_DUE >= CUST_INVOICES_RECORD.AMOUNT THEN            
                                                    AGE_DUE:=AGE_DUE+CUST_INVOICES_RECORD.AMOUNT;
                                                    TOT_DUE:= TOT_DUE - CUST_INVOICES_RECORD.AMOUNT;       
                                                 ELSE
                                                    AGE_DUE:=AGE_DUE+TOT_DUE;
                                                    TOT_DUE:=0;
                                                END IF;
                                                     
                                                PIPE ROW (CUST_DUES_AGING_TYPE (CUST_TOT_DUE_RECORD.CUSTOMER_ID,
                                                             CUST_TOT_DUE_RECORD.CUSTOMER_NAME,
                                                             DUES_AGING_RECORD.TRX_DATE,
                                                             AGE_DUE));
                                                                                      
                                         END IF;
                                         EXIT WHEN CUST_INVOICES_RECORD.TRX_DAYS = DUES_AGING_RECORD.TRX_DATE;
                    END LOOP;     
                    EXIT WHEN TOT_DUE = 0; 
                END LOOP;
      END LOOP;
      RETURN;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN;
   END;

   FUNCTION SUPP_AGING_PERIODICALLY
      RETURN SUPP_DUES_AGING_TABLE
      PIPELINED
   IS
      AGING_TABLE   SUPP_AGE_TABLE;
      DUES_QUERY    CLOB := EMPTY_CLOB ();
   BEGIN
      DUES_QUERY := 'SELECT NULL , NULL , NULL,NULL FROM DUAL WHERE 1 = 1 ';

      EXECUTE IMMEDIATE DUES_QUERY BULK COLLECT INTO AGING_TABLE;

      FOR i IN 1 .. AGING_TABLE.COUNT
      LOOP
         PIPE ROW (SUPP_DUES_AGING_TYPE (AGING_TABLE (i).SUPPLIER_ID,
                                         AGING_TABLE (i).SUPPLIER_NAME,
                                         AGING_TABLE (i).DUE_AGE,
                                         AGING_TABLE (i).DUE_AMOUNT));
      END LOOP;

      AGING_TABLE.DELETE;
      RETURN;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;
   FUNCTION SUPP_AGING_MONTHLY
      RETURN SUPP_DUES_AGING_TABLE
      PIPELINED
   IS
      AGING_TABLE   SUPP_AGE_TABLE;
      DUES_QUERY    CLOB := EMPTY_CLOB ();
   BEGIN
      DUES_QUERY := 'SELECT NULL , NULL , NULL,NULL FROM DUAL WHERE 1 = 1 ';

      EXECUTE IMMEDIATE DUES_QUERY BULK COLLECT INTO AGING_TABLE;

      FOR i IN 1 .. AGING_TABLE.COUNT
      LOOP
         PIPE ROW (SUPP_DUES_AGING_TYPE (AGING_TABLE (i).SUPPLIER_ID,
                                         AGING_TABLE (i).SUPPLIER_NAME,
                                         AGING_TABLE (i).DUE_AGE,
                                         AGING_TABLE (i).DUE_AMOUNT));
      END LOOP;

      AGING_TABLE.DELETE;
      RETURN;
   EXCEPTION
      WHEN OTHERS
      THEN
         NULL;
   END;
END DUES_PKG;
/


--
-- ALI_DEBUG  (Procedure) 
--
CREATE OR REPLACE PROCEDURE PHARMA.ALI_DEBUG 
IS
  XXX CUST_DUES_AGING_TABLE;
BEGIN
SELECT DUES_PKG.CUST_AGING_PERIODICALLY INTO XXX FROM DUAL;
END;
/


--
-- ITEMS_MIN_ALARM  (View) 
--
CREATE OR REPLACE FORCE VIEW PHARMA.ITEMS_MIN_ALARM
(ITEM_ID, ITEM_NAME, UNIT_ID, UNIT_NAME, MIN_QUANT, 
 BALANCE)
BEQUEATH DEFINER
AS 
SELECT "ITEM_ID","ITEM_NAME","UNIT_ID","UNIT_NAME","MIN_QUANT","BALANCE"
  FROM (SELECT M.ITEM_ID,
               I.ITEM_NAME,
               M.UNIT_ID,
               U.UNIT_NAME,
               M.MIN_QUANT,
               (SELECT SUM (N.QUANTITY_IN) - SUM (N.QUANTITY_OUT)
                  FROM TRX_INVENTORIES N
                 WHERE N.ITEM_ID = M.ITEM_ID AND N.UNIT_ID = M.UNIT_ID)
                  BALANCE
          FROM CFG_ITEM_UNITS_MIN M, LKB_ITEMS I, LKB_UNITS U
         WHERE M.ITEM_ID = I.ITEM_ID AND M.UNIT_ID = U.UNIT_ID)
 WHERE BALANCE < MIN_QUANT;


--
-- CFG_TARGET_SECTIONS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.CFG_TARGET_SECTIONS_TRG
BEFORE INSERT
ON PHARMA.CFG_TARGET_SECTIONS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
-- For Toad:  Highlight column TRG_SEC_ID

IF :new.TRG_SEC_ID IS NULL THEN
  :new.TRG_SEC_ID := CFG_TARGET_SECTIONS_SEQ.nextval;
 END IF;
END CFG_TARGET_SECTIONS_TRG;
/


--
-- CFG_TARGET_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.CFG_TARGET_TRG
BEFORE INSERT
ON PHARMA.CFG_TARGET
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TRX_ID IS NULL THEN
-- For Toad:  Highlight column TRX_ID
  :new.TRX_ID := CFG_TARGET_SEQ.nextval;
  END IF;
END CFG_TARGET_TRG;
/


--
-- CFG_TARGET_CUSTOMERS  (Table) 
--
CREATE TABLE PHARMA.CFG_TARGET_CUSTOMERS
(
  TARGET_CUST_ID  NUMBER,
  TARGET_SEC_ID   NUMBER,
  CUSTOMER_ID     NUMBER,
  TRG_QUANTITY    NUMBER,
  TRG_AMOUNT      NUMBER,
  CREATE_DATE     DATE                          DEFAULT SYSDATE,
  CREATED_BY      VARCHAR2(500 BYTE)            DEFAULT USER,
  MODIFY_DATE     DATE,
  MODIFIED_BY     VARCHAR2(500 BYTE),
  NOTES           VARCHAR2(500 BYTE)
)
TABLESPACE USERS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );


--
-- CFG_TARGET_CUSTOMERS_PK  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_CUSTOMERS_PK ON PHARMA.CFG_TARGET_CUSTOMERS
(TARGET_CUST_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_CUSTOMERS_U01  (Index) 
--
CREATE UNIQUE INDEX PHARMA.CFG_TARGET_CUSTOMERS_U01 ON PHARMA.CFG_TARGET_CUSTOMERS
(TARGET_SEC_ID, CUSTOMER_ID)
TABLESPACE USERS
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MAXSIZE          UNLIMITED
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

--
-- CFG_TARGET_CUSTOMERS_TRG  (Trigger) 
--
CREATE OR REPLACE TRIGGER PHARMA.CFG_TARGET_CUSTOMERS_TRG
BEFORE INSERT
ON PHARMA.CFG_TARGET_CUSTOMERS
REFERENCING NEW AS New OLD AS Old
FOR EACH ROW
BEGIN
IF :new.TARGET_CUST_ID IS NULL THEN
-- For Toad:  Highlight column TARGET_CUST_ID
  :new.TARGET_CUST_ID := CFG_TARGET_CUSTOMERS_SEQ.nextval;
  END IF;
END CFG_TARGET_CUSTOMERS_TRG;
/


-- 
-- Non Foreign Key Constraints for Table CFG_DUES_AGING 
-- 
ALTER TABLE PHARMA.CFG_DUES_AGING ADD (
  CONSTRAINT CFG_DUES_AGING_PK
  PRIMARY KEY
  (ID)
  USING INDEX PHARMA.CFG_DUES_AGING_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_DUES_AGING ADD (
  CONSTRAINT CFG_DUES_AGING_U01
  UNIQUE (FROM_DAYS_NO, TO_DAYS_NO)
  USING INDEX PHARMA.CFG_DUES_AGING_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET_MASTER 
-- 
ALTER TABLE PHARMA.CFG_TARGET_MASTER ADD (
  CONSTRAINT CFG_TARGET_MASTER_PK
  PRIMARY KEY
  (TRG_ID)
  USING INDEX PHARMA.CFG_TARGET_MASTER_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_CUST_SECTIONS 
-- 
ALTER TABLE PHARMA.LKB_CUST_SECTIONS ADD (
  CONSTRAINT LKB_CUST_SECTIONS_PK
  PRIMARY KEY
  (SECTION_ID)
  USING INDEX PHARMA.LKB_CUST_SECTIONS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_CUST_SECTIONS ADD (
  CONSTRAINT LKB_CUST_SECTIONS_U01
  UNIQUE (SECTION_NAME)
  USING INDEX PHARMA.LKB_CUST_SECTIONS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_JOB_TITLES 
-- 
ALTER TABLE PHARMA.LKB_JOB_TITLES ADD (
  CONSTRAINT LKB_JOB_TITLES_PK
  PRIMARY KEY
  (TITLE_ID)
  USING INDEX PHARMA.LKB_JOB_TITLES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_MANUFACTURERS 
-- 
ALTER TABLE PHARMA.LKB_MANUFACTURERS ADD (
  CONSTRAINT LKB_MANUFACTURERS_PK
  PRIMARY KEY
  (MNF_ID)
  USING INDEX PHARMA.LKB_MANUFACTURERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_REPS 
-- 
ALTER TABLE PHARMA.LKB_REPS ADD (
  CONSTRAINT LKB_REPS_PK
  PRIMARY KEY
  (REP_ID)
  USING INDEX PHARMA.LKB_REPS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_REPS ADD (
  CONSTRAINT LKB_REPS_U01
  UNIQUE (REP_NAME)
  USING INDEX PHARMA.LKB_REPS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_SUPPLIERS 
-- 
ALTER TABLE PHARMA.LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_PK
  PRIMARY KEY
  (SUPPLIER_ID)
  USING INDEX PHARMA.LKB_SUPPLIERS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_U01
  UNIQUE (SUPPLIER_NAME)
  USING INDEX PHARMA.LKB_SUPPLIERS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_UNITS 
-- 
ALTER TABLE PHARMA.LKB_UNITS ADD (
  CONSTRAINT LKB_PROD_UNITS_PK
  PRIMARY KEY
  (UNIT_ID)
  USING INDEX PHARMA.LKB_PROD_UNITS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_UNITS ADD (
  CONSTRAINT LKB_PROD_UNITS_U01
  UNIQUE (UNIT_NAME)
  USING INDEX PHARMA.LKB_PROD_UNITS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table PS_TXN 
-- 
ALTER TABLE PHARMA.PS_TXN ADD (
  CONSTRAINT PS_TXN_PK
  PRIMARY KEY
  (COLLID, ID)
  USING INDEX PHARMA.PS_TXN_IDX
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_CUSTOMERS 
-- 
ALTER TABLE PHARMA.LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_PK
  PRIMARY KEY
  (CUSTOMER_ID)
  USING INDEX PHARMA.LKB_CUSTOMERS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_U01
  UNIQUE (CUSTOMER_NAME)
  USING INDEX PHARMA.LKB_CUSTOMERS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table LKB_ITEMS 
-- 
ALTER TABLE PHARMA.LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_PK
  PRIMARY KEY
  (ITEM_ID)
  USING INDEX PHARMA.LKB_ITEMS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_U01
  UNIQUE (ITEM_NAME)
  USING INDEX PHARMA.LKB_ITEMS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_ITEMS_SUPPLIERS 
-- 
ALTER TABLE PHARMA.RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_PK
  PRIMARY KEY
  (ITEM_ID, SUPPLIER_ID)
  USING INDEX PHARMA.RTN_ITEM_SUPPLIERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_REPS_CUSTOMERS 
-- 
ALTER TABLE PHARMA.RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_PK
  PRIMARY KEY
  (REP_ID, CUSTOMER_ID)
  USING INDEX PHARMA.RTN_REPS_CUSTOMERS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table RTN_REPS_ITEMS 
-- 
ALTER TABLE PHARMA.RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_PK
  PRIMARY KEY
  (REP_ID, ITEM_ID)
  USING INDEX PHARMA.RTN_REPS_ITEMS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRX_CUST_PAYMENTS 
-- 
ALTER TABLE PHARMA.TRX_CUST_PAYMENTS ADD (
  CONSTRAINT TRX_CUST_PAYMENTS_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX PHARMA.TRX_CUST_PAYMENTS_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRX_DAILY_SALES 
-- 
ALTER TABLE PHARMA.TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX PHARMA.TRX_DAILY_SALES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table TRX_INVENTORIES 
-- 
ALTER TABLE PHARMA.TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX PHARMA.TRX_INVENTORIES_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_ITEM_UNITS_MIN 
-- 
ALTER TABLE PHARMA.CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_PK
  PRIMARY KEY
  (ITEM_ID, UNIT_ID)
  USING INDEX PHARMA.CFG_ITEM_UNITS_MIN_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET 
-- 
ALTER TABLE PHARMA.CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_PK
  PRIMARY KEY
  (TRX_ID)
  USING INDEX PHARMA.CFG_TARGET_PK
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET_SECTIONS 
-- 
ALTER TABLE PHARMA.CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_PK
  PRIMARY KEY
  (TRG_SEC_ID)
  USING INDEX PHARMA.CFG_TARGET_SECTIONS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_U01
  UNIQUE (TARGET_ID, SECTION_ID)
  USING INDEX PHARMA.CFG_TARGET_SECTIONS_U01
  ENABLE VALIDATE);


-- 
-- Non Foreign Key Constraints for Table CFG_TARGET_CUSTOMERS 
-- 
ALTER TABLE PHARMA.CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_PK
  PRIMARY KEY
  (TARGET_CUST_ID)
  USING INDEX PHARMA.CFG_TARGET_CUSTOMERS_PK
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_U01
  UNIQUE (TARGET_SEC_ID, CUSTOMER_ID)
  USING INDEX PHARMA.CFG_TARGET_CUSTOMERS_U01
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_REPS 
-- 
ALTER TABLE PHARMA.LKB_REPS ADD (
  CONSTRAINT LKB_REPS_R01 
  FOREIGN KEY (REP_TITLE_ID) 
  REFERENCES PHARMA.LKB_JOB_TITLES (TITLE_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.LKB_REPS ADD (
  CONSTRAINT LKB_REPS_R02 
  FOREIGN KEY (MANAGER_ID) 
  REFERENCES PHARMA.LKB_REPS (REP_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_SUPPLIERS 
-- 
ALTER TABLE PHARMA.LKB_SUPPLIERS ADD (
  CONSTRAINT LKB_SUPPLIERS_R01 
  FOREIGN KEY (MANUFACTURE_ID) 
  REFERENCES PHARMA.LKB_MANUFACTURERS (MNF_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_CUSTOMERS 
-- 
ALTER TABLE PHARMA.LKB_CUSTOMERS ADD (
  CONSTRAINT LKB_CUSTOMERS_R01 
  FOREIGN KEY (SECTION_ID) 
  REFERENCES PHARMA.LKB_CUST_SECTIONS (SECTION_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table LKB_ITEMS 
-- 
ALTER TABLE PHARMA.LKB_ITEMS ADD (
  CONSTRAINT LKB_ITEMS_R01 
  FOREIGN KEY (MANUFACTURE_ID) 
  REFERENCES PHARMA.LKB_MANUFACTURERS (MNF_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_ITEMS_SUPPLIERS 
-- 
ALTER TABLE PHARMA.RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.RTN_ITEMS_SUPPLIERS ADD (
  CONSTRAINT RTN_ITEM_SUPPLIERS_R02 
  FOREIGN KEY (SUPPLIER_ID) 
  REFERENCES PHARMA.LKB_SUPPLIERS (SUPPLIER_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_REPS_CUSTOMERS 
-- 
ALTER TABLE PHARMA.RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_R01 
  FOREIGN KEY (REP_ID) 
  REFERENCES PHARMA.LKB_REPS (REP_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.RTN_REPS_CUSTOMERS ADD (
  CONSTRAINT RTN_REPS_CUSTOMERS_R02 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES PHARMA.LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table RTN_REPS_ITEMS 
-- 
ALTER TABLE PHARMA.RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_R01 
  FOREIGN KEY (REP_ID) 
  REFERENCES PHARMA.LKB_REPS (REP_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.RTN_REPS_ITEMS ADD (
  CONSTRAINT RTN_REPS_ITEMS_R02 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table TRX_CUST_PAYMENTS 
-- 
ALTER TABLE PHARMA.TRX_CUST_PAYMENTS ADD (
  CONSTRAINT TRX_CUST_PAYMENTS_R01 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES PHARMA.LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table TRX_DAILY_SALES 
-- 
ALTER TABLE PHARMA.TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R01 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES PHARMA.LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R02 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.TRX_DAILY_SALES ADD (
  CONSTRAINT TRX_DAILY_SALES_R03 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES PHARMA.LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table TRX_INVENTORIES 
-- 
ALTER TABLE PHARMA.TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.TRX_INVENTORIES ADD (
  CONSTRAINT TRX_INVENTORIES_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES PHARMA.LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_ITEM_UNITS_MIN 
-- 
ALTER TABLE PHARMA.CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_ITEM_UNITS_MIN ADD (
  CONSTRAINT CFG_ITEM_UNITS_MIN_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES PHARMA.LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET 
-- 
ALTER TABLE PHARMA.CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R01 
  FOREIGN KEY (ITEM_ID) 
  REFERENCES PHARMA.LKB_ITEMS (ITEM_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R02 
  FOREIGN KEY (UNIT_ID) 
  REFERENCES PHARMA.LKB_UNITS (UNIT_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R03 
  FOREIGN KEY (REP_ID) 
  REFERENCES PHARMA.LKB_REPS (REP_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET ADD (
  CONSTRAINT CFG_TARGET_R04 
  FOREIGN KEY (TRG_ID) 
  REFERENCES PHARMA.CFG_TARGET_MASTER (TRG_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET_SECTIONS 
-- 
ALTER TABLE PHARMA.CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_R01 
  FOREIGN KEY (SECTION_ID) 
  REFERENCES PHARMA.LKB_CUST_SECTIONS (SECTION_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET_SECTIONS ADD (
  CONSTRAINT CFG_TARGET_SECTIONS_R02 
  FOREIGN KEY (TARGET_ID) 
  REFERENCES PHARMA.CFG_TARGET (TRX_ID)
  ENABLE VALIDATE);


-- 
-- Foreign Key Constraints for Table CFG_TARGET_CUSTOMERS 
-- 
ALTER TABLE PHARMA.CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_R01 
  FOREIGN KEY (TARGET_SEC_ID) 
  REFERENCES PHARMA.CFG_TARGET_SECTIONS (TRG_SEC_ID)
  ENABLE VALIDATE);

ALTER TABLE PHARMA.CFG_TARGET_CUSTOMERS ADD (
  CONSTRAINT CFG_TARGET_CUSTOMERS_R02 
  FOREIGN KEY (CUSTOMER_ID) 
  REFERENCES PHARMA.LKB_CUSTOMERS (CUSTOMER_ID)
  ENABLE VALIDATE);